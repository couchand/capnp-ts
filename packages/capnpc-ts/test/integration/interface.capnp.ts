/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

/* tslint:disable */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "db739dd0a3eb44d5";
export class Foo_Bar$Params extends __S {
    static readonly _capnp = { displayName: "bar$Params", id: "b5788f2878df1415", size: new __O(8, 0) };
    getInput(): boolean { return __S.getBit(0, this); }
    setInput(value: boolean): void { __S.setBit(0, value, this); }
    toString(): string { return "Foo_Bar$Params_" + super.toString(); }
}
export class Foo_Bar$Results extends __S {
    static readonly _capnp = { displayName: "bar$Results", id: "b1032e44b4d17dea", size: new __O(8, 0) };
    getOutput(): number { return __S.getInt32(0, this); }
    setOutput(value: number): void { __S.setInt32(0, value, this); }
    toString(): string { return "Foo_Bar$Results_" + super.toString(); }
}
export class Foo_Client extends capnp.Capability_Client {
    barRequest(): capnp.Request<Foo_Bar$Params, Foo_Bar$Results> {
        return this.newCall<Foo_Bar$Params, Foo_Bar$Results>("e0de5c805a7c7d44", 0);
    }
}
export class Foo_Server extends capnp.Capability_Server {
    bar(_context: capnp.CallContext<Foo_Bar$Params, Foo_Bar$Results>): Promise<void> {
        return this.internalUnimplemented({
            interfaceName: "/media/local/capnp-ts/packages/capnpc-ts/test/integration/interface.capnp:Foo",
            methodName: "bar",
            typeId: "e0de5c805a7c7d44",
            methodId: 0
        });
    }
    dispatchCall(interfaceId: string, methodId: number, context: capnp.CallContext<capnp.Pointer, capnp.Pointer>): Promise<void> {
        switch (interfaceId) {
            case "e0de5c805a7c7d44": return this.dispatchCallInternal(methodId, context);
            default: return this.internalUnimplemented({
                actualInterfaceName: "/media/local/capnp-ts/packages/capnpc-ts/test/integration/interface.capnp:Foo",
                requestedTypeId: interfaceId
            });
        }
    }
    dispatchCallInternal(methodId: number, context: capnp.CallContext<capnp.Pointer, capnp.Pointer>): Promise<void> {
        switch (methodId) {
            case 0: return this.bar(this.internalGetTypedContext<Foo_Bar$Params, Foo_Bar$Results>(context));
            default: return this.internalUnimplemented({
                interfaceName: "/media/local/capnp-ts/packages/capnpc-ts/test/integration/interface.capnp:Foo",
                typeId: "e0de5c805a7c7d44",
                methodId: methodId
            });
        }
    }
}
export class Foo extends __S {
    static readonly Client = Foo_Client;
    static readonly Server = Foo_Server;
    static readonly _capnp = { displayName: "Foo", id: "e0de5c805a7c7d44", size: new __O(0, 0) };
    toString(): string { return "Foo_" + super.toString(); }
}
